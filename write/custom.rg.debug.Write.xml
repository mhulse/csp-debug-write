<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22">
<Class name="custom.rg.debug.Write">
<Description><![CDATA[
custom.rg.debug.Write
See <code>custom.rg.debug.WriteRule.csr</code> for related code.

@docs https://github.com/registerguard/csp-debug-write
@copyright Copyright (c) 2012 Micky Hulse/The Register-Guard.
@license Released under the Apache License, Version 2.0.
http://www.apache.org/licenses/LICENSE-2.0
@version 1.0.0
@date Monday, November 24, 2012]]></Description>
<Super>%RegisteredObject</Super>
<TimeCreated>62785,78492.150238</TimeCreated>

<Method name="all">
<Description><![CDATA[
The <method>all</method> ClassMethod outputs the value of zwrite command with its HTML escaped.

@see https://groups.google.com/d/topic/intersystems-public-cache/-CmAIWmtHdY/discussion

@param qs { %String } URI query string parameter.
@param label { %String } Used as a label for the output.
@param attr { %String } HTML attributes and values to apply to <code>&lt;pre&gt;</code> tag.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>qs:%String="",label:%String="",attr:%String=""</FormalSpec>
<Implementation><![CDATA[
	
	; Write debug info if "qs" is an empty string OR if value of "qs" variable exists as a query string parameter in the URI:
	if (( ' $length(qs)) || $get(%request.Data(qs, 1), 0)) {
		
		; Opening <pre> tag:
		write !, "<pre", ..attrs(attr), ">"
		
		; Opening label:
		write:($length(label)) !, "---------- ", $zconvert(label, "U"), " ----------"
		
		; Try to otput debug info:
		try {
			
			; Switch the device's IO to "HTML":
			set currIO = ##class(%SYS.NLS.Device).SetIO("HTML")
			
			; Write debug info:
			zwrite
			
		} catch (e) {
			
			; Display a %Status error code to the CSP Page:
			do ##class(%CSP.Page).ShowError(e.AsStatus())
			
		}
		
		; Do we need to switch back to a previous IO?
		if ($length($get(currIO))) {
			
			; Yep. Change it:
			do ##class(%SYS.NLS.Device).SetIO(currIO)
			
		}
		
		; Closing label:
		write:($length(label)) !, "---------- ", $zconvert(label, "U"), " ----------"
		
		; Closing <pre> tag:
		write !, "</pre>", !
		
	}
]]></Implementation>
</Method>

<Method name="attrs">
<Description><![CDATA[
The <method>attrs</method> ClassMethod parses delimited attributes for use in an HTML tag.

@param string { %String } Delimited string to parse.
@param delim1 { %String } Parent delimeter. Default is ",".
@param delim2 { %String } Child delimeter. Default is "|".
@private]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>string:%String="",delim1:%String=",",delim2:%String="|"</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	; Return value:
	set return = ""
	
	; Should we continue?
	if ($length(string)) {
		
		; Leading white space:
		set return = " "
		
		; Loop through the string:
		for i=1:1:$length(string, delim1) {
			
			; Get the attribute set:
			set attribute = $zstrip($piece(string, ",", i), "<>W")
			
			; There should only be one delimeter per set:
			if ($length(attribute, delim2) = 2) {
				
				; Attribute name:
				set key = $zstrip($piece(attribute, "|"), "<>W")
				
				; Attribute value:
				set value = $zstrip($piece(attribute, "|", 2), "<>W")
				
				; Build the attribute string:
				set return = return _ key _ "=""" _ value _ """ "
				
			}
			
		}
		
		; Remove trailing whitespace:
		set return = $zstrip(return, ">W")
		
	}
	
	; Return:
	quit return
]]></Implementation>
</Method>
</Class>
</Export>
